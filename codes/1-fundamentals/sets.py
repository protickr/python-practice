# Python also includes a data type for sets. A set is an unordered collection 
# with no duplicate elements. Basic uses include membership testing and eliminating 
# duplicate entries. Set objects also support mathematical operations like union, 
# intersection, difference, and symmetric difference.

# Curly braces or the set() function can be used to create sets. Note: to create an 
# empty set you have to use set(), not {}

# Unordered / un-indexed collection of elements with no duplicates
# sets are mutable but an immutable set can be generated by using frozenset()
# sets are optimized to use membership operator( in )


# declaring a set 
# 1
# species = { 'Homo habilis', 'Homo rudolfensis', 'Homo erectus', 'Homo antecessor' }
# species = {} will create an empty dictionary not a set. 
#
# 2
# species = set()

# print(type(species))
# <class 'set'>

new_set = { 1, 2, 3, 4, 5, 3, 4, 6 }
# print(new_set)
# {1, 2, 3, 4, 5, 6}

# as sets are unordered/unindexed we can not access it by index 

# set methods
#
# set.add(new_element)
# adds a new_element to the set
# new_set.add(7)
# print(new_set)
# {1, 2, 3, 4, 5, 6, 7}

# set.remove(element)
# removes element if exists or else throws an Exception
# new_set.remove(6)
# print(new_set)
# {1, 2, 3, 4, 5}
#
# new_set.remove(7)
# KeyError: 7

# set.discard(element)
# removes element from a set if it exists or does nothing if not. 
# new_set.discard(7)
# print(new_set)
# {1, 2, 3, 4, 5, 6}

# set.pop()
# pops and returns random element from the set
# x = new_set.pop()
# print(x, new_set)
# 1 {2, 3, 4, 5, 6}

# set.clear()
# removes all elements from a set and returns NoneType object
# mutates the set
# new_set.clear()
# print(new_set)

# del set()
# deletes set from context
# del new_set
# print(new_set)

# create set from a list 
# set_from_list = set([1, 2, 3, 4, 5, 1, 2])
# print(set_from_list)
# {1, 2, 3, 4, 5}

# create list from a set
# list_from_set = list(set_from_list)
# print(list_from_set)
# [1, 2, 3, 4, 5]


# set operations
# returns a new result set; does not modify operands

a = { 1, 2, 3 }
b = { 3, 4, 5 }

# union
# print(a.union(b))
# {1, 2, 3, 4, 5}

# intersection
# print( a.intersection(b))
# {3}

# in a but not in b ( difference )
# print( a.difference(b))
# {1, 2}

# symbolic difference 
# print(a.symmetric_difference(b))
# {1, 2, 4, 5}

# a.isdisjoin(b), a.issubset(b), a.issuperset(b)

